import sqlite3 as lite
from Util import common
import json
from datetime import datetime
import hashlib

# import history raw data into database    
con = None
cur = None

def init():
    con = common.getDBConnection()
    cur = con.cursor()

def insert_news(article):
    try:
        global con
        global cur
        
        sql = "insert into t_daily_news(embers_id,title,author,post_time,post_date,content,stock_index,source,update_time,url) values (?,?,?,?,?,?,?,?,?,?)"
        embersId = article["emberdId"]
        title = article["title"]
        author = article["author"]
        postTime = article["postTime"]
        postDate = article["postDate"]
        content = article["content"]
        stockIndex = article["stockIndex"]
        source = article["source"]
        updateTime = article["updateTime"]
        url = article["url"]
        cur.execute(sql,(embersId,title,author,postTime,postDate,content,stockIndex,source,updateTime,url))
        
    except lite.Error, e:
        log.info( "Error insert_news: %s" % e.args[0])
    finally:
        pass
    
def import_news_to_database():
    try:
        historyNews = open(common.get_configuration( "model", 'GROUP_STOCK_NEWS'))
        historyNewsJson = json.load(historyNews)
        
        for stockIndex in historyNewsJson:
            for article in historyNewsJson[stockIndex].values():
                news = {}
                news["title"] = article["title"]
                news["author"] = article["author"]
                postTime = article["postTime"].split(".")[0]
                postTime = datetime.strptime(postTime,"%Y-%m-%d %H:%M:%S")
                news["post_time"] = postTime
                news["post_date"] = postTime.date()
                news["content"] = article["content"]
                news["stock_index"] = stockIndex
                news["source"] = "Bloomberg News"
                news["update_time"] = article["queryTime"]
                news["newsUrl"] = article["newsUrl"]
                embersId = hashlib.sha1(article["content"]).hexdigest()
                news["embers_id"] = embersId
                ifExisted = bns.check_article_existed(news)
                if not ifExisted:
                    bns.insert_news(news)
                    "Insert into Mission process"
                    bns.insert_news_mission(news)
        bns.close_db_connection()
    except lite.Error, e:
        print "Error: %s" % e.args[0]
    finally:
            pass

if __name__ == "__main__":
    import_news_to_database()