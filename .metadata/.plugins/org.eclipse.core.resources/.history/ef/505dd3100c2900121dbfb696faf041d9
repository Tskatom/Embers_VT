import xlrd
import json
import datetime
import hashlib
import os
import argparse
import sys
from etool import logs
"""
    Initiate the Json data for all the Indices
"""
logs.init()
__processor__ = os.path.basename(__file__.split(".")[0])
log =  logs.getLogger(__processor__)

def transcsv2json(xlsFile):
    wb = xlrd.open_workbook(xlsFile)
    sh = wb.sheet_by_name('Sheet1')
    #read the stock index from file
    stockIndex = sh.row_values(0,0)[0].split(" ")[0]
    stockPrices = []
    for rownum in range(2,sh.nrows):
        try:
            time_tuple = xlrd.xldate_as_tuple(sh.row_values(rownum,0)[0],0)
            post_date = datetime.datetime.strftime(datetime.date(time_tuple[0],time_tuple[1],time_tuple[2]),"%Y-%m-%d")
            lastPrice = float(sh.row_values(rownum,0)[1])
            previousCloseValue = float(sh.row_values(rownum,0)[3])
           
            dayValue = {}
            dayValue["previousCloseValue"] = previousCloseValue
            updateTime = datetime.datetime.strftime(datetime.datetime.strptime(post_date,"%Y-%m-%d"),"%m/%d/%Y") + " 16:00:00"
            dayValue["updateTime"] = updateTime
            dayValue["name"] = stockIndex
            dayValue["type"] = "stock"
            dayValue["feed"] = "Bloomberg - Stock Index"
            dayValue["date"] = post_date
            dayValue["queryTime"] = "10/01/2012 04:00:03"
            dayValue["currentValue"] = lastPrice
            embersId = hashlib.sha1(json.dumps(dayValue)).hexdigest()
            dayValue["embersId"] = embersId
            stockPrices.append(dayValue)
        except:
            message = sys.exc_info()
            log.info(message)
            continue
    
    return stockIndex,stockPrices

def import2db():

def parse_args():
    ap = argparse.ArgumentParser("The Program to initiate stock prices from xls to json")
    ap.add_argument('-dir',dest='price_dir',type=str,help='The directory storing the stock prices')
    ap.add_argument('-od',dest='out_dir',type=str,help='The directory used to store the output json')
    return ap.parse_args()


def main():
    #read the stock prices files from directory
    args = parse_args()
    print args
    price_dir = args.price_dir
    out_dir = args.out_dir
    
    files = os.listdir(price_dir)
    for f in files:
        f = os.path.join(price_dir,f)
        if os.path.isfile(f):
            stock, stockjson = transcsv2json(f)
            name = stock + ".json"
            out_file = os.path.join(out_dir,name)
            with open(out_file,"w") as out_w:
                for day_value in stockjson:
                    out_w.write(json.dumps(day_value))
                    out_w.write("\n")
            
if __name__ == "__main__":
    main()

        